// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://github.com/a-faceit-candidate/userservice",
        "contact": {
            "name": "API Support",
            "url": "http://github.com/a-faceit-candidate/userservice",
            "email": "faceit@colega.eu"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/users": {
            "get": {
                "description": "List users, can be filtered by country code.\nThis operation does not return the PasswordHash and PasswordSalt fields for security reasons.",
                "produces": [
                    "application/json"
                ],
                "summary": "List users.",
                "operationId": "list-users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "filter by country code",
                        "name": "country",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/restuser.User"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/restuser.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/restuser.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "The user provided should have the ` + "`" + `id` + "`" + ` field empty, as it will be generated by the service.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create a new user.",
                "operationId": "post-user",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/restuser.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/restuser.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/restuser.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Retrieve a user by its ID.",
                "operationId": "get-user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/restuser.User"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/restuser.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/restuser.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "The ` + "`" + `id` + "`" + `, ` + "`" + `created_at` + "`" + ` and ` + "`" + `updated_at` + "`" + ` fields should not be updated when requested.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update a user with the given ID.",
                "operationId": "put-user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/restuser.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/restuser.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/restuser.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "If UpdatedAt field doesn't match",
                        "schema": {
                            "$ref": "#/definitions/restuser.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/restuser.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "summary": "Delete a user by its ID.",
                "operationId": "delete-user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {},
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/restuser.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/restuser.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "restuser.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Something terrible happened."
                }
            }
        },
        "restuser.User": {
            "type": "object",
            "properties": {
                "country": {
                    "description": "Country is the country code of the user, in ISO 3166-1 alpha-2 formatted as lowercase two character string.\nCountry is not validated to exist when a user is created.",
                    "type": "string",
                    "example": "es"
                },
                "created_at": {
                    "description": "CreatedAt is set by the service when the user is created.\nIt's formatted as an RFC3339 timestamp.",
                    "type": "string",
                    "format": "date-time",
                    "example": "2006-01-02T15:04:05Z"
                },
                "email": {
                    "description": "Email is the email of the user.",
                    "type": "string",
                    "format": "email",
                    "example": "john@colega.eu"
                },
                "first_name": {
                    "description": "FirstName is the first name of the user",
                    "type": "string",
                    "example": "John "
                },
                "id": {
                    "description": "ID is generated by the service when the user is created. It is a valid UUID.",
                    "type": "string",
                    "format": "uuid",
                    "example": "c3e11b46-109c-11eb-adc1-0242ac120002"
                },
                "last_name": {
                    "description": "LastName is the first name of the user",
                    "type": "string",
                    "example": "Doe"
                },
                "name": {
                    "description": "Name is the nickname of the user.",
                    "type": "string",
                    "example": "john_doe87"
                },
                "password": {
                    "description": "Password is the password of the user to be created or updated\nThis field should be filled only on the create/update requests, and it will come empty on any service responses\nPassword should be at least 8 characters long",
                    "type": "string",
                    "format": "password"
                },
                "password_hash": {
                    "description": "PasswordHash is the SHA-256 hash of concatenation of ` + "`" + `Password` + "`" + ` and ` + "`" + `PasswordHash` + "`" + `.\nPasswordHash is set by the service and shouldn't be sent on Create or Update requests.",
                    "type": "string",
                    "example": "5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8"
                },
                "password_salt": {
                    "description": "PasswordSalt is the unique random salt for this user.\nPasswordSalt is set by the service and shouldn't be sent on Create or Update requests.",
                    "type": "string",
                    "example": "5f4dcc3b5aa765d61d8327deb882cf99"
                },
                "updated_at": {
                    "description": "UpdatedAt is set by the service when the user is updated.\nIt's formatted as an RFC3339 timestamp. For a recently created user, it equals the CreatedAt field.",
                    "type": "string",
                    "format": "date-time",
                    "example": "2006-01-02T15:04:05Z"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0.0",
	Host:        "localhost:8080",
	BasePath:    "/v1",
	Schemes:     []string{},
	Title:       "User Service REST API",
	Description: "A simple user service for the FACEIT code challange.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
