basePath: /v1
definitions:
  restuser.ErrorResponse:
    properties:
      message:
        example: Something terrible happened.
        type: string
    type: object
  restuser.User:
    properties:
      country:
        description: |-
          Country is the country code of the user, in ISO 3166-1 alpha-2 formatted as lowercase two character string.
          Country is not validated to exist when a user is created.
        example: es
        type: string
      created_at:
        description: |-
          CreatedAt is set by the service when the user is created.
          It's formatted as an RFC3339 timestamp.
        example: "2006-01-02T15:04:05Z"
        format: date-time
        type: string
      email:
        description: Email is the email of the user.
        example: john@colega.eu
        format: email
        type: string
      first_name:
        description: FirstName is the first name of the user
        example: 'John '
        type: string
      id:
        description: ID is generated by the service when the user is created. It is a valid UUID.
        example: c3e11b46-109c-11eb-adc1-0242ac120002
        format: uuid
        type: string
      last_name:
        description: LastName is the first name of the user
        example: Doe
        type: string
      name:
        description: Name is the nickname of the user.
        example: john_doe87
        type: string
      password:
        description: |-
          Password is the password of the user to be created or updated
          This field should be filled only on the create/update requests, and it will come empty on any service responses
          Password should be at least 8 characters long
        format: password
        type: string
      password_hash:
        description: |-
          PasswordHash is the SHA-256 hash of concatenation of `Password` and `PasswordHash`.
          PasswordHash is set by the service and shouldn't be sent on Create or Update requests.
        example: 5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8
        type: string
      password_salt:
        description: |-
          PasswordSalt is the unique random salt for this user.
          PasswordSalt is set by the service and shouldn't be sent on Create or Update requests.
        example: 5f4dcc3b5aa765d61d8327deb882cf99
        type: string
      updated_at:
        description: |-
          UpdatedAt is set by the service when the user is updated.
          It's formatted as an RFC3339 timestamp. For a recently created user, it equals the CreatedAt field.
        example: "2006-01-02T15:04:05Z"
        format: date-time
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: faceit@colega.eu
    name: API Support
    url: http://github.com/a-faceit-candidate/userservice
  description: A simple user service for the FACEIT code challange.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://github.com/a-faceit-candidate/userservice
  title: User Service REST API
  version: 1.0.0
paths:
  /users:
    get:
      description: |-
        List users, can be filtered by country code.
        This operation does not return the PasswordHash and PasswordSalt fields for security reasons.
      operationId: list-users
      parameters:
      - description: filter by country code
        in: query
        name: country
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/restuser.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/restuser.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/restuser.ErrorResponse'
      summary: List users.
    post:
      consumes:
      - application/json
      description: The user provided should have the `id` field empty, as it will be generated by the service.
      operationId: post-user
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/restuser.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/restuser.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/restuser.ErrorResponse'
      summary: Create a new user.
  /users/{id}:
    delete:
      operationId: delete-user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204": {}
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/restuser.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/restuser.ErrorResponse'
      summary: Delete a user by its ID.
    get:
      operationId: get-user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/restuser.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/restuser.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/restuser.ErrorResponse'
      summary: Retrieve a user by its ID.
    put:
      consumes:
      - application/json
      description: The `id`, `created_at` and `updated_at` fields should not be updated when requested.
      operationId: put-user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/restuser.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/restuser.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/restuser.ErrorResponse'
        "409":
          description: If UpdatedAt field doesn't match
          schema:
            $ref: '#/definitions/restuser.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/restuser.ErrorResponse'
      summary: Update a user with the given ID.
swagger: "2.0"
